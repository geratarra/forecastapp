{"version":3,"sources":["components/forecast/Forecast.module.css","components/weather-card/WeatherCard.js","config.js","components/forecast/Forecast.js","App.js","components/weather-detail/WeatherDetail.js","serviceWorker.js","index.js","components/weather-detail/WeatherDetail.module.css","components/weather-card/WeatherCard.module.css"],"names":["module","exports","forecast","WeatherCard","props","history","useHistory","day","Date","date","getDay","dateLabel","slice","unitsSymbol","units","react_default","a","createElement","className","style","container","onClick","path","toLowerCase","push","dayOfWeek","humidity","pressure","speed","clickedOnCard","header","src","weather","icon","alt","description","Math","round","min","max","API_URI","API_KEY","UNITS","Forecast","_position","cards","forEach","item","index","_props","temp","dt","weather_card_WeatherCard","key","renderForecast","axios","require","WeatherDetail","_useState","useState","undefined","_useState2","Object","slicedToArray","forecastDetail","setForecastDetail","get","params","lat","position","coords","latitude","lon","longitude","then","response","data","list","catch","error","console","log","currentDay","location","pathname","dailyForecast","filter","auxCurrentDay","toDateString","map","x_label","dt_txt","toTimeString","renderLineChart","es6","width","height","customChartWrapper","type","dataKey","stroke","strokeDasharray","dy","angle","tick","fill","fontSize","tickFormatter","label","concat","dx","title","state","averageStatus","FORECAST_URL","App","setForecast","navigator","geolocation","getCurrentPosition","err","react_router_dom","react_router","exact","render","forecast_Forecast","assign","weather_detail_WeatherDetail","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b983b7b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"Forecast_forecast__3fScO\"};","import React from 'react';\nimport { useHistory } from \"react-router\";\n\nimport style from './WeatherCard.module.css';\n\nconst WeatherCard = (props) => {\n    let history = useHistory();\n    const date = new Date(props.props.date*1000);\n    const days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    const day = days[ date.getDay() ];\n    const dateLabel = day.slice(0, 3);\n    const unitsSymbol = props.props.units === 'metric' ? 'C°' : 'F°';\n\n    const clickedOnCard = (day) => {\n        const path = '/' + day.slice(0, 3).toLowerCase();\n        history.push(path, { dayOfWeek: day, humidity: props.props.humidity, pressure: props.props.pressure, speed: props.props.speed });\n    };\n\n    return (\n        <div className={style.container} onClick={() => clickedOnCard(day)}>\n            <h4 className={style.header}>{dateLabel}</h4>\n            <img src={'http://openweathermap.org/img/wn/' + props.props.weather.icon + '@2x.png'} alt={props.props.weather.description + ' icon'}/>\n            <div>\n                <p>\n                    <span>Min:&nbsp;</span>\n                    <span>{Math.round(props.props.min)} {unitsSymbol}</span>\n                </p>\n                <p>\n                    <span>Max:&nbsp;</span>\n                    <span>{Math.round(props.props.max)} {unitsSymbol}</span>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default WeatherCard;","const API_URI = 'https://api.openweathermap.org/data/2.5';\nconst API_KEY = 'ae8a60a3a1f6085bd401deed5686b833';\nconst UNITS = 'metric';\n\nexport {\n    API_KEY,\n    API_URI,\n    UNITS\n};","import React from 'react';\n\nimport WeatherCard from '../weather-card/WeatherCard';\nimport style from './Forecast.module.css';\n\nimport { UNITS } from '../../config';\n\nfunction Forecast(props) {\n    const forecast = props.forecast;\n\n    function renderForecast() {\n        const cards = [];\n        forecast.forEach((item, index) => {\n            const _props = {\n                max: item.temp.max,\n                min: item.temp.min,\n                date: item.dt,\n                weather: item.weather[0],\n                units: UNITS,\n                pressure: item.pressure,\n                humidity: item.humidity,\n                speed: item.speed\n            };\n            cards.push(\n                <WeatherCard props={_props} key={index}></WeatherCard>\n            );\n        });\n        return cards;\n    }\n\n    return (\n        <div className={style.forecast}>\n            <p>FORECAST</p>\n            {renderForecast()}\n        </div>\n    );\n}\n\nexport default Forecast;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nimport Forecast from './components/forecast/Forecast';\nimport WeatherDetail from './components/weather-detail/WeatherDetail';\nimport './App.css';\n\nimport { API_KEY, API_URI, UNITS } from './config';\n\nconst axios = require('axios');\n// const FORECAST_URL = 'https://cors-anywhere.herokuapp.com/https://samples.openweathermap.org/data/2.5/forecast?q=London,us&appid=b6907d289e10d714a6e88b30761fae22';\nconst FORECAST_URL = API_URI + '/forecast/daily?cnt=5&appid=' + API_KEY;\n\nlet _position;\n\nfunction App() {\n\n    const [forecast, setForecast] = useState(undefined);\n    if (!_position) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n            _position = position;\n            axios.get(FORECAST_URL, {\n                params: {\n                    lat: position.coords.latitude,\n                    lon: position.coords.longitude,\n                    units: UNITS\n                }\n            })\n                // axios.get(FORECAST_URL)\n                .then(response => {\n                    setForecast(response.data.list);\n                })\n                .catch(error => {\n                    setForecast(null);\n                    console.log('Error while trying to get the forecast:');\n                    console.log(error);\n                }, function (err) {\n                    setForecast(null);\n                    console.log('Error while trying to get the current position:');\n                    console.log(err);\n                });\n        });\n    }\n\n    if (forecast === undefined) {\n        return <h3 className=\"loading\">Loading...</h3>\n    } else if (forecast === null) {\n        return <h3>Error!</h3>\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Router>\n                    <Route exact path=\"/\" render={(props) => <Forecast {...props} forecast={forecast} />} />\n                    <Route path=\"/sun\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/mon\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/tue\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/wed\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/thu\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/fri\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                    <Route path=\"/sat\" render={(props) => <WeatherDetail {...props} position={_position} />} />\n                </Router>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\n\nimport { API_KEY, API_URI, UNITS } from '../../config';\n\nimport style from './WeatherDetail.module.css';\n\nconst axios = require('axios');\nconst FORECAST_URL = API_URI + '/forecast?appid=' + API_KEY;\n\nconst WeatherDetail = (props) => {\n\n    const [forecastDetail, setForecastDetail] = useState(undefined);\n    if (!forecastDetail) {\n\n        axios.get(FORECAST_URL, {\n            params: {\n                lat: props.position.coords.latitude,\n                lon: props.position.coords.longitude,\n                units: UNITS\n            }\n        })\n        .then(response => {\n            setForecastDetail(response.data.list);\n        })\n        .catch(error => {\n            setForecastDetail(null);\n            console.log('Error while trying to get the forecast:');\n            console.log(error);\n        });\n    }\n\n    if (forecastDetail === undefined) {\n        return <h3 className=\"loading\">Loading...</h3>\n    } else if (forecastDetail === null) {\n        return <h3>Error!</h3>\n    }\n    \n    const currentDay = props.location.pathname.slice(1);\n    const dailyForecast = forecastDetail.filter(item => {\n        const auxCurrentDay = new Date(item.dt*1000);\n        return currentDay === auxCurrentDay.toDateString().slice(0, 3).toLowerCase();\n    });\n\n    dailyForecast.map(item => item.x_label = new Date(item.dt_txt).toTimeString().slice(0, 5));\n\n    const renderLineChart = (\n        <LineChart width={700} height={400} data={dailyForecast} className={style.customChartWrapper}>\n            <Line type=\"monotone\" dataKey=\"main.temp\" stroke=\"#8884d8\" />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"x_label\" dy={10} angle={-35} tick={{ fill:'white', fontSize: 12 }} />\n            <YAxis tickFormatter={(label) => `${label}°`} dx={-10} tick={{ fill:'white', fontSize: 14 }} />\n        </LineChart>\n    );\n\n    console.log(props);\n    \n    \n    return (\n        <div>\n            <span className={style.title}>{props.location.state.dayOfWeek}</span>\n            <div>\n                {renderLineChart}\n                <div className={style.averageStatus}>\n                    <p><span>Pressure:&nbsp;</span><span>{props.location.state.pressure}&nbsp;hPa</span></p>\n                    <p><span>Humidity:&nbsp;</span><span>{props.location.state.humidity}%</span></p>\n                    <p><span>Speed:&nbsp;</span><span>{props.location.state.speed}&nbsp;meter/sec</span></p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default WeatherDetail;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"customChartWrapper\":\"WeatherDetail_customChartWrapper__1Odnh\",\"title\":\"WeatherDetail_title__1nGHz\",\"averageStatus\":\"WeatherDetail_averageStatus__3bh4u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WeatherCard_container__2cvaU\",\"header\":\"WeatherCard_header__2cl55\"};"],"sourceRoot":""}